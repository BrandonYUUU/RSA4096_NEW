4096-bit Montgomery Exponentiation (c ^ d % n) in Verilog HDL targeted on device Cyclone II, with 128-bit word length, 32 words.

For more information about Montgomery Exponentiation algorithm, please refer the slides of my Master project (ms project.pptx).

1. To run
    1.1.    Open ModExp.qpf with Quartus II 12.1 64-bit version web edition (latest version like 14.0 doesn't support Cyclone II device which is our target device).
    1.2.    If not compiled, click  Processing -> Start Compilation  to compile
    1.3.    Once compiled successfully, click  Tools -> Run Simulation Tool -> RTL Simulation  to simulate using ModelSim Altera.
    1.4.    Once ModelSim Altera opened, in Transcript window, type "do ModExpSimulation.tcl" to run simulation. (MonProSimulation.tcl is also included if you want to test MonPro module alone)

    
2. The test case included and passed (Also available in Mathematica and Python code)
n = 0x89cf8be62cbef276f08e4ab924ca82cd2b9047aaac427714afb6d2cc2cd44e174c6b50cc5026565d691e864f3a63840b1751269d08e81364d656f675aaf01c5e8e8d4df2c347c12613ee998bbac8b4becca7a0bbcee286689e9ae806129ac9aa7879e7738f16dcb79a9fb179c309e5a1eca6ca2536ff59d9235cc0c498f31016cd62d101df08ac2947c9b8127154d4bb69be40af8804b460222175439447a3108262d304395fb5345ce83ba14b6e0702745082f3aed92770ca1dc514005950cd97c8b9dd5f209571a65d9d5c00b23e85f7b57572c75a6dfacc830396973794bea38acfd8bee53c5ffed87cae3543c34618e742687b14a326dc28001b0d29fb182a576fb4cceae2008abdb7a55a51f36d08ac0baa02fa8cbd26a1c0c7db44284e5cb6858cf231d05fa3dec31efcb62665674b6bd0c99234725b15833fb39da0c03d1129a043e4db49f7432b0876c37d9167f534418c832031c7e08db017d45836166b52794bdcc34432ff3226c07ab0d20af80a9c2c5d6c11e65911a9e75a92afc3f10c1b5a1312506be4f63a5c9c221b89db32c6461922694b042192411b717b2184f1393111aac48c61c581ebe780f5ccefc09d66cb06919b73fc2dd2c497c5505b1a6037d540464b8bc9db81d4d368c6cd82bd9553cd4d595b62dde5caebf0e4ac5cb55393eca29874a1cd280d78b4218509770414de1125d4db98a62532dd
nprime0 = 0x4fafb2e1f5cf259975edaf6d7027ca8b  
c = 
25f49f66fadbeb4f654f5220fe38fefebe73f866245993c6b2ed901b0d0b2a57db4cf5562c91e81e0ab165e05dfab1f2636b8ea5aad7923a48758d60e5568cbdeede6622f2d81eb9ffc13bee02e3306b6af9db8bce682a17a450c9185e2240f6f52e8cf175f4aebe4c9b29803931428d8c35b68768457ff2a90c8c8d118185a95da62ebcb5670d1ff4b770a54773cc021e6eec433b0c6513e371494fb6385cbe2372c824fb0096eb7ebc1ff7d092b87ed3066e2799e58842c69349f2f0f535060fedb548882e6f0f692eb69a342f5603ff58cfbf5a354b661a41708e0037e5367a5e0b90c0476c5c9e859d0870a6de3972cdd43499f181c8bed0e9831cb9d1aad40926c7e20954eb909fb2e8703a0a7a7379588a7748828d844c94563b0cd3696cc3242dfb71b9312ae0ed664023e0c0f727c4feaa8e0889b9ec1d2f8a37e21248c8ffeea70dcd749eb6caf5c9f338fef75a6a11ac39272b54ca798839beba3065029aaf7b22c81dea8fc9b975e022c3c34500d6dae7c8d82d78e72cb133423421d32b3e0a2ec6778c7e5cd078ba0bf0730dafa7a452dcecec9fa2f1cfee357f75ebc30202efa62044acbd39651d2b832c5430e1d4b5fe0991e661bcb19761e99b67099a50b7f60473df8d9add890f3ed6fc5e999943cb3244ccf6f18d169bb334729732d4d3e5c66d440d091c94c914f480c319c02ece6d322d1d34c8803b31
(c is m ^ 0xd % n)
d = 0x7f35bc36ee3a1ae3f1be6c5c21f6029600d3f362779fd061dd464c6db33a20b30b76c0bc98c0ed42886af221bfbe5280644ae890f487745d149f0ae2c52c68f4d25b0ce016b863859c3eb51e8508094da9384599ab4740fe1c4038a324dda675f90e10b97063df6e6758550def1cd3f7ee23ce49bc9cf079aa7d00b5797de7778282998b92ccedaff37f20110626ebc0b060d93f913f6b6c6e4644dbeb55d19915e5118dbece7fe190d65e6d80b4553d57acc7a5dc79ae40ba91a239d8effbd1786a842ecdf6b155371b562d8a7d2605823158b8b804b449f7db65c6156e61eb0d1dac2a88d39a313a02e93e588d51ca8d243d4cc061d1adb787628f1fd7fb7769c5c22a8e74013472afa1910af8130830329c6ef04674886b3dd7f0de6b68d01e9aab82e29eb85a763a640f52bd42049baa1b92c3bac1c51d16879a0752b20f8fb356088b8d45ab3133da7d0fd94db891bde963b1f140ff87aa710c711666c3e6c5fb61d6bacbadacff72dcacfc63aef9fcf271b35e91169e0eefb63ce7105b4df3ca564dce6edf0cd8f67cdbb5892791375bc2bbc5f39dc500161269800483bc63c5d078725c7c7bb9e296bbad8fc13c5c69b020e8d6f5f610c96c43425579d22602bedaa769279125eb4209ae2c5c6e2bd5a9be69267322d17f27ea039e862c9a7154c0e67aa70950bdc0b546872d0b2aa4a40a176d5cb7fa6b9ab5f00255
(Actually d = (0xd) ^ -1 mod (p - 1)(q - 1), the inverse of 0x80)
m = 0x444d9850809f292387a1798fe6addd9e61d9fe398147a8f45f0ef320f7f60e7f75f2bc20a7f5195cde62d43f261908b9ccf719ab2922fbd8dca5b35354a1d50572d6bc20d80d6a1cc2472fd603e9ba024cea2df00a66dc4e21681081399f8a8f10fc9eee0a1727f7ea5f24b6de6fec4b843b2a7d15ab2c21ccc93ff710fce97d786e30efce9b2e70b4d4dfccb7d779cc4b5ca436953c178e61067a8cd7a3283c27e969e2c8bf23fb9a431f7a41c30359dfde228125fb5f3d866d7002091472ad52631db9d17034ce51797350e6256403bf3df0bbf66ac168b4a1ca795718ada2027c013f38018399ee6a8e2f9c19ed348af5890333b5b3cedfec4623ab899605a2939b3b7fa74d8aff88ec827f99d273d5627386528cc241e345ac72eac39204ade7cef37ed2ec2f856f3d95e0ae1a1b6c596216ae0fdbc8a36bcb0167e98363905c053b25fdacbe7ce71b48fba52e5998a33736fd1ac7ce1ad0a6f226bdd974d3b564b08be04c3e5c94938160c6b3ed755a3ac132ae2a201ac902ee25777cf09f9821883744da64cc249558f2ad985fff3e0ba10ac728b4a41865bf350d278d41a8a6e165e049937f411fed1e70e79933a1d1c2ad4ab155c09fcd8f739cd488869bdbd2e72bb5b707120911b3b68b57da54f267dd138266d26d53961058fe8c1d7173e55bc7fdeb31234efe6e6480432aa50f4ec6f0093395d1805142cb6d1d
(The result of c ^ d % n = (m ^ 0xd) ^ d % n should be exactly m)
(Also I have tested with some smaller cases, the numbers of which can be found in Mathematica code)


3. More Information
You can change settings to have difference synthesis and fitting report. See "compilation configuration.txt"
